# Bewerbungsbot Setup (Live-Scripting)

This is a Setup Script that is developed and can be used with the Live-Scripting method by Andreas Wittmann. (https://github.com/andreaswittmann/live-scripting)

## Prerequisites

Before starting, ensure you have Docker Desktop and Git installed.

## Step 1: Setup Project Directory and Clone Repository

We want to create a test directory, clone the project, and verify the basic structure.

```shell


ssh asamadhi
bash


# Create project directory
cd ~/LocalProjects/ai-bootcamp
ls -ltr


# Clone the bewerbungs-bot project
git clone http://100.71.227.145:3300/anwi/bewerbungs-bot.git
cd bewerbungs-bot

export PROJECT_DIR=$(pwd)
echo "Project directory set to: ${PROJECT_DIR}"


# Verify project structure
pwd
ls -la
echo "Project cloned successfully!"
```

The project was cloned from http://100.71.227.145:3300/anwi/bewerbungs-bot into ~/test-projects/bewerbungs-bot and the directory structure was verified.

## Step 2: Configure Application Settings and Docker Volumes

We want to set up the main configuration file and create a organized directory structure for Docker volume mounting.

```shell
# Copy configuration template
cd ${PROJECT_DIR}
cp config_template.yaml config.yaml

# Create organized directory structure for Docker volumes
mkdir -p docker-volumes/{data,projects,logs}
pwd
ls -la docker-volumes/
tree docker-volumes/ 2>/dev/null || ls -la docker-volumes/*/

# Create sample CV file in the volumes directory
## Or copy your cv to the correct place
cp data/CV_Andreas.Wittmann_GmbH_DE_2025_04.md docker-volumes/data/cv.md

######## or scp the files from local machine
exit
whoami

# Update these paths according to your local setup
scp ~/LocalProjects/ai-bootcamp/bewerbungs-bot/data/CV_Andreas.Wittmann_GmbH_DE_2025_04.md asamadhi:~/LocalProjects/ai-bootcamp/bewerbungs-bot/docker-volumes/data/cv.md

scp ~/LocalProjects/ai-bootcamp/.env asamadhi:~/LocalProjects/ai-bootcamp/bewerbungs-bot/docker/.env

ssh asamadhi
bash
cd ~/LocalProjects/ai-bootcamp/bewerbungs-bot
export PROJECT_DIR=$(pwd)
echo "Project directory set to: ${PROJECT_DIR}"
########### End of scp section


ls -la docker-volumes/data/



# Copy config to volumes directory for mounting
cat config.yaml
cp config.yaml docker-volumes/
ls -la docker-volumes/ 

```

The main configuration was copied from template, a organized `docker-volumes` directory was created containing all directories needed for Docker volume mounting (data, projects, logs), and configuration files were prepared for container access.

## Step 3: Configure Docker Environment and API Keys

We want to set up Docker environment variables and configure API keys.

```shell
# Navigate to docker directory and setup environment
echo ${PROJECT_DIR}
cd ${PROJECT_DIR}/docker
pwd


# Copy your .env file (update path as needed)
pwd
# cp /path/to/your/.env .  # Update this path to your actual .env file location
# Or create .env file manually with your API keys
cat .env 2>/dev/null || echo "No .env file found - create one with your API keys"
ls -la

## Now we need to eidt the frontend/.env file to add the correct VITE_API_BASE_URL
cd ${PROJECT_DIR}
cat frontend/.env
#get currnt tailscale ip
ifconfig | awk '/inet / && $2 ~ /^100\./ {print $2}'
export TAILSCALE_IP=$(ifconfig | awk '/inet / && $2 ~ /^100\./ {print $2}')
echo $TAILSCALE_IP

## Here document to update the VITE_API_BASE_URL in frontend/.env
cat <<EOF > frontend/.env
VITE_API_BASE_URL=http://${TAILSCALE_IP}:8003
EOF
cat frontend/.env




```

The Docker environment template was created as .env file. You need to manually edit this file with your actual OpenAI, Anthropic, and Google API keys.

## Step 4: Update Docker Compose and Start Container

We want to update the docker-compose.yml to use our organized volume structure and start the application.

```shell
cd ${PROJECT_DIR}/docker
cat docker-compose.yml

# Build Docker image and start container

# no cache build to ensure latest dependencies
#docker compose build
docker compose build --no-cache

# Starting application container with organized volumes...
docker compose up -d

# Verify container status and volumes

docker compose ps
docker compose logs --tail=10
# "Mounted volumes:"
ls -la ../docker-volumes/
```

The docker-compose.yml was updated to use the organized `docker-volumes` directory structure and configured with project name "bot" for Docker Desktop. The Docker image was built and the application container started with all volumes properly mounted from the centralized location.

## Step 5: Verify Application and Access

We want to perform health checks and verify the application is accessible.

```shell
# Wait for application to start and perform health checks
sleep 15
echo "Performing health checks..."

# Test API endpoints
curl -f http://localhost:8003/api/v1/health
echo ""

# Verify web interface
curl -I http://localhost:8003 | head -3

# Display access information
echo ""
echo "==================================="
echo "ðŸŽ‰ SETUP COMPLETE! ðŸŽ‰"
echo "==================================="
echo "Web Dashboard: http://localhost:8003"
echo "API Endpoint:  http://localhost:8003/api/v1/"
echo ""
echo "Note: Docker environment uses port 8003 to avoid conflicts with local development (port 8002)"
echo ""
```

Health checks confirmed the application is running correctly. The web dashboard is accessible at http://localhost:8002 and API endpoints are responding properly.

## Management Commands

For ongoing management, use these grouped commands:

```shell
# View application status and logs
docker compose ps
docker compose logs -f

# Stop application
# docker compose down

# Restart application  
# docker compose restart

# Rebuild after updates
# git pull && docker compose down && docker compose build --no-cache && docker compose up -d
```

## Troubleshooting

If issues occur, use these diagnostic commands:

```shell
# Check detailed logs and environment
docker compose logs bewerbungs-bot
docker compose exec bewerbungs-bot env | grep API_KEY

# Clean restart
docker compose down
docker compose build --no-cache
docker compose up -d

# Port configuration notes:
# - Docker environment: http://localhost:8003
# - Local development: http://localhost:8002
# - If you get connection errors, check which port you're using
```

## Complete Cleanup

When you're done testing and want to remove everything:

```shell
# Stop and remove containers
cd $PROJECT_DIR/docker
pwd

docker compose down

# Remove Docker images
docker rmi bewerbungs-bot || true
docker image prune -f

# Remove project directory (WARNING: This deletes everything!)
cd $PROJECT_DIR/..
pwd

rm -rf bewerbungs-bot

# Clean up Docker system
docker system prune -f

echo "Complete cleanup performed. All project files and Docker resources removed."
```

This cleanup section stops all containers, removes Docker images, deletes the entire project directory, and cleans up Docker system resources to return your system to its original state.

---

**Setup completed successfully!** ðŸš€

Your Bewerbungs-Bot is now running at: http://localhost:8003

Note: Docker uses port 8003 to avoid conflicts with local development (port 8002)
